{"version":3,"file":"background.js","mappings":"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","sources":["webpack://goldenthinkerextractor/./src/background.js","webpack://goldenthinkerextractor/./src/com_goldenthinkerextractor_filters_for_website/filters.js"],"sourcesContent":["import { extractFiltersAndValues } from './com_goldenthinkerextractor_filters_for_website/filters.js';\r\n\r\n\r\nchrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {\r\n    if (message.action === \"startScript\") {\r\n        let tab = message.tab.id;\r\n        try {\r\n            await chrome.scripting.executeScript({\r\n                target: {tabId: tab},\r\n                function: mainScript\r\n            });\r\n            console.log(\"Script injected into tab \" + tab);\r\n            sendResponse({status: \"success\"});\r\n        } catch (error) {\r\n            console.error(\"Error injecting script into tab \" + tab, error);\r\n            sendResponse({status: \"error\", message: error.message});\r\n        }\r\n    } else if (message.action === \"stopScript\") {\r\n        console.log(\"Script stopped.\");\r\n        // Implement stopping logic if necessary\r\n        sendResponse({status: \"stopped\"});\r\n    }\r\n    return true; // Keep the message channel open for the response\r\n});\r\n  \r\n\r\nasync function mainScript() {\r\n  \r\n\r\n    async function getContainer() {\r\n        return new Promise((resolve, reject) => {\r\n            const containerSelector = \"#search-results-container\";\r\n            const checkExist = setInterval(() => {\r\n                const container = document.querySelector(containerSelector);\r\n                if (container) {\r\n                    clearInterval(checkExist);\r\n                    resolve(container);\r\n                }\r\n            }, 100); // Check every 100ms\r\n        });\r\n    }\r\n  \r\n/*     async function sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    } */\r\n\r\n    async function waitForDomChanges(selector, timeout = 30000) {\r\n        return new Promise(async (resolve, reject) => { // Note the async keyword here\r\n            const container = await getContainer(); // Properly await the container\r\n            if (!container) {\r\n                reject(new Error(`Container with selector \"${selector}\" not found.`));\r\n                return;\r\n            }\r\n    \r\n            // Options for the observer (which mutations to observe)\r\n            const config = { childList: true, subtree: true };\r\n    \r\n            // Callback function to execute when mutations are observed\r\n            const callback = function(mutationsList, observer) {\r\n                observer.disconnect(); // Stop observing\r\n                resolve(); // Resolve the promise as changes are detected\r\n            };\r\n    \r\n            // Create an instance of the observer with the callback function\r\n            const observer = new MutationObserver(callback);\r\n    \r\n            // Start observing the target node for configured mutations\r\n            observer.observe(container, config);\r\n    \r\n            // Set a timeout to reject the promise if no changes are detected within the specified time\r\n            setTimeout(() => {\r\n                observer.disconnect(); // Stop observing\r\n                reject(new Error(`Timeout reached. No changes detected in the container within ${timeout} ms.`));\r\n            }, timeout);\r\n        });\r\n    }\r\n  \r\n    async function extractDataFromPage() {\r\n\r\n        let results = [];\r\n  \r\n        function addObjectIfUnique(newObj) {\r\n          // Busca en el arreglo si ya existe un objeto con el mismo nombre\r\n          const exists = results.find(obj => obj.name === newObj.name);\r\n          // Si no existe, inserta el nuevo objeto\r\n          if (!exists) {\r\n              results.push(newObj);\r\n              console.log(`Objeto con nombre ${newObj.name} agregado.`);\r\n          } else {\r\n              console.log(`Objeto con nombre ${newObj.name} ya existe.`);\r\n          }\r\n        }\r\n\r\n        function sanitizeString(str) {\r\n            return str.replace(/[^\\x20-\\x7E]+/g, \"\"); // Removes non-printable characters\r\n            // Add more sanitization rules as needed\r\n        }\r\n\r\n        console.log(\"extractDataFromPage..\");\r\n        // Directly mapping to the attributes for photos and lead panels\r\n        let photos = Array.from(document.querySelectorAll(\"[data-anonymize='headshot-photo']\")).map(el => el.getAttribute(\"src\"));\r\n        let leadPanels = Array.from(document.querySelectorAll(\"[data-control-name='view_lead_panel_via_search_lead_name']\")).map(el => el.getAttribute(\"href\"));\r\n        // Mapping to text content for other fields\r\n        let personNames = Array.from(document.querySelectorAll(\"span[data-anonymize='person-name']\")).map(el => el.textContent.trim());\r\n        let titles = Array.from(document.querySelectorAll(\"[data-anonymize='title']\")).map(el => el.textContent.trim());\r\n        let jobTitles = Array.from(document.querySelectorAll(\"[data-anonymize='job-title']\")).map(el => el.textContent.trim());\r\n        let locations = Array.from(document.querySelectorAll(\"[data-anonymize='location']\")).map(el => el.textContent.trim());\r\n        let companies = Array.from(document.querySelectorAll('a[data-anonymize=\"company-name\"]')).map(el => el.textContent.trim());\r\n        let abouts = Array.from(document.querySelectorAll('.flex.flex-column.justify-space-between')).map(el => el.textContent.trim());\r\n    \r\n        // Assuming all arrays are of the same length. If not, additional checks are needed.\r\n        for (let i = 0; i < personNames.length; i++) {\r\n            let result = {\r\n                photo: photos[i], // Directly using the mapped src attribute\r\n                leadPanel: sanitizeString(leadPanels[i]), // Directly using the mapped href attribute\r\n                name: sanitizeString(personNames[i]),\r\n                title: sanitizeString(titles[i]),\r\n                jobTitle: sanitizeString(jobTitles[i]),\r\n                location: sanitizeString(locations[i]),\r\n                company: sanitizeString(companies[i]), // Directly using the mapped text content\r\n                about: sanitizeString(abouts[i])\r\n            };\r\n            addObjectIfUnique(result);\r\n        }\r\n        console.log(\"Data Obtained\");\r\n        console.log(JSON.stringify(results, null, 2)); // Pretty print the results\r\n        return results;\r\n    } \r\n  \r\n/*     async function sendResultsToServer(results) {\r\n        console.log(\"Sending results to server...\");\r\n        try {\r\n            // Validate JSON before sending\r\n            const jsonData = JSON.stringify(results);\r\n            const response = await fetch(\"http://127.0.0.1:8080/index\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: jsonData\r\n            });\r\n    \r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n            const jsonResponse = await response.json();\r\n            console.log(\"Results sent successfully\", jsonResponse);\r\n        } catch (error) {\r\n            console.error(\"Error sending results to server:\", error);\r\n        }\r\n    }\r\n   */\r\n\r\n\r\n\r\n\r\n    async function storeResultsLocally(newResults) {\r\n\r\n\r\n        // Retrieve the existing results array from storage\r\n        chrome.storage.local.get([\"globalResultsArray\"], function(data) {\r\n            let completeObject = {\r\n                filters: [],\r\n                leads: []\r\n            };\r\n            if (!completeObject.filters){\r\n                completeObject.filter = extractFiltersAndValues();\r\n            }\r\n            completeObject.leads = data.globalResultsArray || [];\r\n            // Append new results to the existing array\r\n            completeObject.leads.push(...newResults);\r\n            \r\n            // Store the updated array back into chrome.storage\r\n            chrome.storage.local.set({ \"globalResultsArray\": completeObject.leads }, function() {\r\n                console.log(\"New results have been added to the global array.\");\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    async function navigateToNextPage() {\r\n        const nextPageButton = document.querySelector(\".artdeco-pagination__button--next:not([disabled])\");\r\n        if (nextPageButton) {\r\n            nextPageButton.click();\r\n            waitForDomChanges(\"#search-results-container\")\r\n                .then(() => {\r\n                    console.log(\"New DOM data loaded in the container.\");\r\n                    scrollDown();\r\n                })\r\n                .catch(error => console.error(error.message));\r\n            return true;\r\n        } else {\r\n            console.log(\"No next page button found or it is disabled.\");\r\n            return false;\r\n        }\r\n    }\r\n  \r\n// Simplified scrollDown logic\r\nasync function scrollDown() {\r\n    const container = await getContainer();\r\n    console.log(\"scrollDown called for:\", container);\r\n\r\n    // Simplified logic to trigger a scroll and wait for changes\r\n    let attempts = 0;\r\n    const maxAttempts = 5; // Adjust based on your needs\r\n\r\n    do {\r\n        container.scrollBy(0, 1000); // Adjust scroll step size as needed\r\n        try {\r\n            await waitForDomChanges(\"#search-results-container\", 5000); // Adjust timeout as needed\r\n            console.log(\"DOM changes detected, attempting to extract data...\");\r\n            const results = await extractDataFromPage();\r\n            if (results.length > 0) {\r\n                await storeResultsLocally(results);\r\n                console.log(\"Data sent to server.\");\r\n                attempts = 0; // Reset attempts if data was successfully processed\r\n            } else {\r\n                console.log(\"No new data found, increasing attempt count.\");\r\n                attempts++;\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error waiting for DOM changes:\", error.message);\r\n            attempts++;\r\n        }\r\n    } while (attempts < maxAttempts);\r\n\r\n    if (attempts >= maxAttempts) {\r\n        console.log(\"Max attempts reached, checking for next page...\");\r\n        const nextPageSuccess = await navigateToNextPage();\r\n        if (nextPageSuccess) {\r\n            console.log(\"Navigated to next page, continuing data extraction...\");\r\n            await scrollDown(); // Recursively call scrollDown for the next page\r\n        } else {\r\n            console.log(\"No further pages or unable to navigate, stopping script.\");\r\n        }\r\n    }\r\n}\r\n\r\n    \r\n    console.log(\"mainScript() executing...\");\r\n    await scrollDown();\r\n      \r\n}\r\n\r\nchrome.webRequest.onCompleted.addListener(\r\n    function(details) {\r\n      // Check if the request was rate-limited\r\n      if (details.statusCode === 429) {\r\n        console.log(\"Rate limit hit:\", details);\r\n        // Optionally, extract the Retry-After header if present\r\n        const retryAfterHeader = details.responseHeaders.find(header => header.name.toLowerCase() === \"retry-after\");\r\n        if (retryAfterHeader) {\r\n          console.log(\"Retry after (seconds):\", retryAfterHeader.value);\r\n          // Here you could broadcast a message to your content scripts or take other actions\r\n        }\r\n      }\r\n    },\r\n    {urls: [\"*://www.example.com/*\"]}, // Adjust the pattern to match the URLs you're interested in\r\n    [\"responseHeaders\"]\r\n  );\r\n  ","export function extractFiltersAndValues() {\r\n    const results = [];\r\n  \r\n    // Function to clean text and remove invisible characters\r\n    const cleanText = (text) => text.replace(/[\\n\\r]+|[\\s]{2,}/g, ' ').trim();\r\n  \r\n    // Select all filter groups\r\n    document.querySelectorAll('fieldset[data-x-search-filter]').forEach(fieldset => {\r\n      const searchFilter = cleanText(fieldset.getAttribute('title')); // Get the filter name from the title attribute\r\n      const filters = [];\r\n  \r\n      // Find all selected filter values within the <ul> list\r\n      fieldset.querySelectorAll('ul li div[title]').forEach(filterElement => {\r\n        const filterValue = cleanText(filterElement.getAttribute('title')); // Use the title attribute of the div to get the filter value\r\n        if (filterValue) {\r\n          filters.push(filterValue);\r\n        }\r\n      });\r\n  \r\n      // Add the filter group and its values to the results\r\n      results.push({\r\n        parent: {\r\n          search_filter: searchFilter,\r\n          filters: filters\r\n        }\r\n      });\r\n    });\r\n  \r\n    console.log(JSON.stringify(results, null, 2));\r\n    return results;\r\n  }\r\n\r\n  export function extractFiltersAndValuesForDefault() {\r\n    let resultString = \"\";\r\n\r\n    // Function to clean text and remove invisible characters\r\n    const cleanText = (text) => text.replace(/[\\n\\r]+|[\\s]{2,}/g, ' ').trim();\r\n\r\n    // Select all filter groups\r\n    document.querySelectorAll('fieldset[data-x-search-filter]').forEach((fieldset, index, array) => {\r\n        const searchFilter = cleanText(fieldset.getAttribute('title')); // Get the filter name from the title attribute\r\n        let filters = [];\r\n\r\n        // Find all selected filter values within the <ul> list\r\n        fieldset.querySelectorAll('ul li div[title]').forEach(filterElement => {\r\n            const filterValue = cleanText(filterElement.getAttribute('title')); // Use the title attribute of the div to get the filter value\r\n            if (filterValue) {\r\n                filters.push(filterValue);\r\n            }\r\n        });\r\n\r\n        // Concatenate the filter group and its values\r\n        if (filters.length > 0) {\r\n            // Add the current group's filters to the result string, separated by underscores\r\n            resultString += (resultString ? \"_\" : \"\") + filters.join(\"_\");\r\n        }\r\n    });\r\n\r\n    console.log(resultString);\r\n    return resultString;\r\n}"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","mainScript","_mainScript","_callee9","getContainer","_getContainer","waitForDomChanges","_waitForDomChanges","extractDataFromPage","_extractDataFromPage","storeResultsLocally","_storeResultsLocally","navigateToNextPage","_navigateToNextPage","scrollDown","_scrollDown","_context9","_callee8","container","attempts","maxAttempts","_results","_context8","console","log","scrollBy","results","t0","message","_callee7","nextPageButton","_context7","document","querySelector","click","_callee6","newResults","_context6","chrome","storage","local","get","data","_completeObject$leads","cleanText","completeObject","filters","leads","filter","text","replace","trim","querySelectorAll","fieldset","searchFilter","getAttribute","filterElement","filterValue","parent","search_filter","JSON","stringify","globalResultsArray","set","_x5","_callee5","addObjectIfUnique","sanitizeString","photos","leadPanels","personNames","titles","jobTitles","locations","companies","abouts","result","_context5","str","newObj","find","obj","concat","Array","from","map","el","textContent","photo","leadPanel","title","jobTitle","location","company","about","_callee4","selector","timeout","_args4","_context4","_ref2","_callee3","config","callback","observer","_context3","childList","subtree","mutationsList","disconnect","MutationObserver","observe","setTimeout","_x6","_x7","_x4","_callee2","_context2","checkExist","setInterval","clearInterval","runtime","onMessage","addListener","_ref","_callee","sender","sendResponse","tab","_context","action","id","scripting","executeScript","target","tabId","function","status","_x","_x2","_x3","webRequest","onCompleted","details","statusCode","retryAfterHeader","responseHeaders","header","toLowerCase","urls"],"sourceRoot":""}