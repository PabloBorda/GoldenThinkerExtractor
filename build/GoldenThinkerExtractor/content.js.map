{"version":3,"file":"content.js","mappings":"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","sources":["webpack://goldenthinkerextractor/./src/content.js"],"sourcesContent":["// CORS: 'sha256-3woF8BZ54TeXM+czaH3aXoaJsVpiamuAKFsXDykAR/Q='\r\n\r\nfunction attach_event_listeners(){\r\n  // Save selectors to cookies\r\n  console.log(\"Attaching event listener to start/stopScript button\");\r\n\r\n  const startstopScriptButton = document.getElementById(\"startButton\");\r\n  \r\n  startstopScriptButton.addEventListener(\"click\", function() {\r\n      if (this.innerHTML === \"Start\") {\r\n        console.log(\"Start button clicked\");\r\n        this.style.backgroundColor = \"#f44336\";\r\n        this.innerHTML = \"stopScript\";\r\n        chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\r\n          console.log(\"Sending 'startScript' message to background script\");\r\n          chrome.runtime.sendMessage({ action: \"startScript\", tab: tabs[0] }, function(response) {\r\n            // Close the popup window after sending the message\r\n            window.close();\r\n          });\r\n        });\r\n      } else {\r\n        console.log(\"stopScript button clicked\");\r\n        this.style.backgroundColor = \"\"; // Reset button color\r\n        this.innerHTML = \"Start\";\r\n        console.log(\"Sending 'stopScript' message to background script\");\r\n        chrome.runtime.sendMessage({ action: \"stopScript\", tab: tabs[0] }, function(response) {\r\n          // Close the popup window after sending the message\r\n          window.close();\r\n        });\r\n      }\r\n  });\r\n\r\n\r\n  document.getElementById(\"downloadButton\").addEventListener(\"click\", function() {\r\n      console.log(\"downloading...\");\r\n      const filenameInput = document.getElementById(\"filename\");\r\n      const filename = filenameInput.value.trim() || \"download\"; // Use a default filename if none is provided\r\n\r\n      chrome.storage.local.get([\"globalResultsArray\"], function(data) {\r\n          if (data.globalResultsArray) {\r\n              const jsonString = JSON.stringify(data.globalResultsArray, null, 2);\r\n              const blob = new Blob([jsonString], { type: \"application/json\" });\r\n              const url = URL.createObjectURL(blob);\r\n\r\n              const a = document.createElement(\"a\");\r\n              a.href = url;\r\n              a.download = `${filename}.json`; // Use the user-specified filename\r\n              document.body.appendChild(a);\r\n              a.click();\r\n\r\n              document.body.removeChild(a);\r\n              URL.revokeObjectURL(url);\r\n          } else {\r\n              console.log(\"No data to download.\");\r\n          }\r\n      });\r\n  });\r\n\r\n  // Clear selectors from cookies and text area\r\n  document.getElementById(\"clearButton\").addEventListener(\"click\", function() {\r\n    console.log(\"clear\");\r\n    chrome.storage.local.clear(function() {\r\n      var error = chrome.runtime.lastError;\r\n      if (error) {\r\n          console.error(error);\r\n      } else {\r\n          console.log('Data cleared from chrome.storage.local');\r\n      }\r\n    });\r\n  });\r\n\r\n  document.getElementById(\"addElementButton\").addEventListener(\"click\", function() {\r\n    const nameInput = document.getElementById(\"elementName\");\r\n    const selectorInput = document.getElementById(\"elementSelector\");\r\n    const name = nameInput.value.trim();\r\n    const selector = selectorInput.value.trim();\r\n\r\n    if (name && selector) {\r\n        chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\r\n            const currentTabId = tabs[0].id.toString(); // Convert tab ID to string for use as a key\r\n            const newElement = {name, selector};\r\n\r\n            // Retrieve the current list of selectors for the tab, add the new one, and save it back\r\n            chrome.storage.local.get([currentTabId], function(result) {\r\n                const currentSelectors = result[currentTabId] ? result[currentTabId] : [];\r\n                currentSelectors.push(newElement);\r\n                let storageObject = {};\r\n                storageObject[currentTabId] = currentSelectors;\r\n\r\n                chrome.storage.local.set(storageObject, function() {\r\n                    console.log('Selector saved for tab ID:', currentTabId);\r\n                    // Clear inputs and refresh the list of selectors\r\n                    nameInput.value = '';\r\n                    selectorInput.value = '';\r\n                    loadSelectorsForCurrentTab();\r\n                });\r\n            });\r\n        });\r\n    } else {\r\n        alert(\"Please fill in both name and selector fields.\");\r\n    }\r\n  });\r\n\r\n\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n  console.log(\"DOMContentLoaded\");\r\n  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\r\n    const url = new URL(tabs[0].url);\r\n    const domain = url.hostname;\r\n    document.getElementById(\"domainName\").textContent = domain;\r\n  });\r\n  attach_event_listeners();\r\n  loadSelectorsForCurrentTab(); // Load selectors for the current tab\r\n\r\n  var tablinks = document.getElementsByClassName(\"tablinks\");\r\n  for (let i = 0; i < tablinks.length; i++) {\r\n      tablinks[i].addEventListener('click', function(event) {\r\n          var tabName = this.getAttribute('data-tab');\r\n          openTab(event,tabName);\r\n      });\r\n\r\n      // Automatically open the first tab or a specific tab\r\n      if(tablinks.length > 0) {\r\n        tablinks[0].click();\r\n      }\r\n    }\r\n\r\n    \r\n\r\n    function getFaviconUrl(url) {\r\n      // Assuming favicon is at the root directory as a fallback\r\n      let faviconUrl = `${url.protocol}//${url.hostname}/favicon.ico`;\r\n    \r\n      // Attempt to fetch the favicon specified in the page's link element\r\n      function findFaviconInDocument() {\r\n        const link = document.querySelector(\"link[rel~='icon']\");\r\n        if (link) {\r\n          return link.href;\r\n        }\r\n        return '';\r\n      }\r\n\r\n      chrome.scripting.executeScript({\r\n        target: {tabId: url.id},\r\n        function: findFaviconInDocument,\r\n      }, (injectionResults) => {\r\n        for (const frameResult of injectionResults)\r\n          if (frameResult.result && frameResult.result !== '') {\r\n            faviconUrl = frameResult.result;\r\n            break;\r\n          }\r\n        document.getElementById('target_favicon').src = faviconUrl;\r\n      });\r\n    \r\n      return faviconUrl; // This will return the default favicon path or the updated one if found\r\n    }\r\n\r\n    \r\n    // Fetch and display the favicon and domain\r\n    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\r\n      const url = new URL(tabs[0].url);\r\n      document.getElementById(\"domainName\").textContent = url.hostname;\r\n      document.getElementById('target_favicon').src = `${url.protocol}//${url.host}/favicon.ico`;\r\n    });\r\n\r\n});\r\n\r\nfunction loadSelectorsForCurrentTab() {\r\n  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\r\n      const currentTabId = tabs[0].id.toString();\r\n      chrome.storage.local.get([currentTabId], function(result) {\r\n          const selectors = result[currentTabId] ? result[currentTabId] : [];\r\n          const elementsList = document.getElementById(\"elementsList\");\r\n          elementsList.innerHTML = ''; // Clear existing list\r\n\r\n          selectors.forEach((element, index) => {\r\n              const elementItem = document.createElement(\"div\");\r\n              elementItem.className = \"element-item\";\r\n              elementItem.innerHTML = `<td>${element.name}: ${element.selector}</td><td></td><td></td><td><button class=\"removeElementButton\" data-index=\"${index}\">X</button></td>`;\r\n              elementsList.appendChild(elementItem);\r\n\r\n              // Add remove functionality\r\n              elementItem.querySelector(\".removeElementButton\").addEventListener(\"click\", function() {\r\n                  removeSelectorFromCurrentTab(index);\r\n              });\r\n          });\r\n      });\r\n  });\r\n}\r\n\r\n\r\nfunction removeSelectorFromCurrentTab(index) {\r\n  chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {\r\n      const currentTabId = tabs[0].id.toString();\r\n      chrome.storage.local.get([currentTabId], function(result) {\r\n          let selectors = result[currentTabId];\r\n          if (selectors) {\r\n              selectors.splice(index, 1); // Remove the selector at the specified index\r\n              let storageObject = {};\r\n              storageObject[currentTabId] = selectors;\r\n\r\n              chrome.storage.local.set(storageObject, function() {\r\n                  console.log('Selector removed for tab ID:', currentTabId);\r\n                  loadSelectorsForCurrentTab(); // Refresh the list of selectors\r\n              });\r\n          }\r\n      });\r\n  });\r\n}\r\n\r\n\r\nfunction openTab(evt, tabName) {\r\n  var i,tabcontent, tablinks;\r\n  tabcontent = document.getElementsByClassName(\"tabcontent\");\r\n  for (i = 0; i < tabcontent.length; i++) {\r\n    tabcontent[i].style.display = \"none\";\r\n  }\r\n  tablinks = document.getElementsByClassName(\"tablinks\");\r\n  for (i = 0; i < tablinks.length; i++) {\r\n    tablinks[i].className = tablinks[i].className.replace(\" active\", \"\");\r\n  }\r\n  var targetTab = document.getElementById(tabName);\r\n  if (targetTab) {\r\n    targetTab.style.display = \"block\";\r\n    evt.currentTarget.className += \" active\";\r\n  } else {\r\n    console.error(\"Tab not found: \", tabName);\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"names":["loadSelectorsForCurrentTab","chrome","tabs","query","active","currentWindow","currentTabId","id","toString","storage","local","get","result","selectors","elementsList","document","getElementById","innerHTML","forEach","element","index","elementItem","createElement","className","concat","name","selector","appendChild","querySelector","addEventListener","splice","storageObject","set","console","log","removeSelectorFromCurrentTab","openTab","evt","tabName","i","tabcontent","tablinks","getElementsByClassName","length","style","display","replace","targetTab","currentTarget","error","domain","URL","url","hostname","textContent","this","backgroundColor","runtime","sendMessage","action","tab","response","window","close","filename","value","trim","data","globalResultsArray","jsonString","JSON","stringify","blob","Blob","type","createObjectURL","a","href","download","body","click","removeChild","revokeObjectURL","clear","lastError","nameInput","selectorInput","newElement","currentSelectors","push","alert","event","getAttribute","src","protocol","host"],"sourceRoot":""}